// Adapted from SQJ 2011
// Scaled down by dividing numbers by 2048 and rounding.
//To execute in alloy: run  show for ...


abstract IMeasurable
	price : integer
	footprint: integer
	reliability : integer

abstract BerkeleyDbC
	HAVE_STATISTICS : IMeasurable  ?
		[ this.footprint = 139  ]
		[ this.price = 0 ]
		[ this.reliability = 0]
	HAVE_CRYPTO : IMeasurable  ?
		[ this.footprint = 19 ]
		[ this.price = 300 ]
		[ this.reliability = 0]
	HAVE_INDEXES : IMeasurable
		[ this.footprint = 0 ]
		[ this.price = 0 ]
		[ this.reliability = 0]
		xor HAVE_BTREE : IMeasurable
		    [ this.footprint = 0 ]
		    [ this.price = 0]	
		    [ this.reliability = 0]	    
		    BTREE_FAST : IMeasurable
			[ this.footprint = 1800 ]
			[ this.price = 0]
			[ this.reliability = 0]
		    BTREE_SMALL : IMeasurable 
			[ this.footprint = 340 ]
			[ this.price = 0 ]
			[ this.reliability = 0]
		HAVE_HASH : IMeasurable  ?
			[ this.footprint = 56]
			[ this.price = 125 ]
			[ this.reliability = 0]
		HAVE_QUEUE : IMeasurable  ?
			[ this.footprint = 28]
			[ this.price = 50 ]
			[ this.reliability = 0]
	HAVE_REPLICATION : IMeasurable  ?
		[ this.footprint = 89 ]
		[ this.price = 200]
		[ this.reliability = 1]
	HAVE_VERIFY : IMeasurable  ?
		[ this.footprint = 50]
		[ this.price = 100]
		[ this.reliability = 1]
	DIAGNOSTIC : IMeasurable  ?
		[ this.footprint = 191 ]
		[ this.price = 0 ]
		[ this.reliability = 1]
	HAVE_SEQUENCE : IMeasurable  ?
		[ this.footprint = 20]
		[ this.price = 50 ]
		[ this.reliability = 0]
	total_footprint : integer
		[ total_footprint = sum IMeasurable.footprint ]
	total_price : integer
		[ total_price = sum IMeasurable.price ]
	total_reliability : integer
		[ total_reliability = sum IMeasurable.reliability ]

simpleConfig : BerkeleyDbC 


<< min simpleConfig.total_footprint >>
<< min simpleConfig.total_price >>
<< max simpleConfig.total_reliability >>